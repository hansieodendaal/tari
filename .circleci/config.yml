version: 2.1

defaults:
  rust_image: &rust_image quay.io/tarilabs/rust_tari-build-with-deps:nightly-2021-05-06

commands:
  test:
    description: Run the tests
    parameters:
      release:
        description: Set this to true to compile in release mode.
        type: boolean
        default: false
    steps:
      - run:
          name: Calculate dependencies
          command: |
            rustc --version >rust-version
            test -e Cargo.lock || cargo generate-lockfile
      - run:
          name: Install cargo2junit
          command: cargo install cargo2junit
      - restore_cache:
          keys:
            - v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-<<parameters.release>>-{{checksum "Cargo.lock"}}
      - run:
          name: Run tests
          command: mkdir -p testresults && cargo test --workspace --all-features -v --jobs=3 <<#parameters.release>>--release<</parameters.release>> -- -Z unstable-options --format json --report-time | cargo2junit > testresults/results.xml
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-<<parameters.release>>-{{checksum "Cargo.lock"}}
      - store_test_results:
          path: testresults
      - store_artifacts:
          path: testresults
  build:
    description: Build
    parameters:
      release:
        description: Set this to true to compile in release mode.
        type: boolean
        default: false
    steps:
      - run:
          name: Calculate dependencies
          command: |
            rustc --version >rust-version
            test -e Cargo.lock || cargo generate-lockfile
      - restore_cache:
          keys:
            - v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-<<parameters.release>>-{{checksum "Cargo.lock"}}
      - run:
          name: Build
          command: cargo build -v --all --all-features --jobs=3 <<#parameters.release>>--release<</parameters.release>>
      - run:
          name: Build Wallet
          command: cargo build -p tari_wallet <<#parameters.release>>--release<</parameters.release>>
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-<<parameters.release>>-{{checksum "Cargo.lock"}}
  clippy:
    description: cargo clippy
    steps:
      - run:
          name: Calculate dependencies
          command: |
            rustc --version >rust-version
            test -e Cargo.lock || cargo generate-lockfile
      - restore_cache:
          keys:
            - v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-{{checksum "Cargo.lock"}}
      - run:
          name: Cargo fmt
          command: |
            TOOLCHAIN=$(cat rust-toolchain)
            rustup component add --toolchain $TOOLCHAIN rustfmt
            cargo fmt --all -- --check
      - run:
          name: Run clippy (main source)
          command: |
            TOOLCHAIN=$(cat rust-toolchain)
            rustup component add --toolchain $TOOLCHAIN clippy
            cargo clippy -- -D warnings -W clippy::cognitive_complexity
      - run:
          name: Run clippy (all targets)
          command: cargo clippy --all-targets -- -D warnings
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-{{checksum "Cargo.lock"}}
  cucumber-js:
    description: Run cucumber scenarios
    steps:
      - run:
          name: npm ci
          command: cd integration_tests && npm ci
      - run:
          name: Check formatting
          command: cd integration_tests && npm run check-fmt
      - run:
          name: Check eslint
          command: cd integration_tests && npm run lint
      - run:
          name: Pre-build base node
          command: cargo build --release --bin tari_base_node
      - run:
          name: Pre-build wallet
          command: cargo build --release --bin tari_console_wallet
      - run:
          name: Pre-build mmproxy
          command: cargo build --release --bin tari_merge_mining_proxy
      - run:
          name: Pre-build mining node
          command: cargo build --release --bin tari_mining_node
      - run:
          name: Run cucumber scenarios
          command: cd integration_tests && mkdir -p cucumber_output && node_modules/.bin/cucumber-js --name "Wallet sending and receiving" --name "Get Transaction Info" --format json:cucumber_output/tests.cucumber
      - run:
          name: Compress artifacts
          command: ls -l -a integration_tests/temp && tar -cvzf integration_tests/logs.tar integration_tests/temp/base_nodes && ls -l integration_tests/*.tar
      - store_test_results:
          path: integration_tests/cucumber_output
      - store_artifacts:
          path: integration_tests/temp/base_nodes
          destination: base_nodes

jobs:
  run-integration-tests:
    docker:
      - image: *rust_image
    resource_class: medium
    steps:
      - checkout
      - cucumber-js


workflows:
  version: 2
  workflow:
    jobs:
      - run-integration-tests:
          filters:
            branches:
              ignore: gh-pages
